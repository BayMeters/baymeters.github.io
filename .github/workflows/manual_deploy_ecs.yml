name: Update ECS Service Container Image

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'ECR Image tag to deploy (e.g., 1a2b3c4)'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 515308131221.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: baymeters/company_website
  ECS_CLUSTER: company_website_runner
  ECS_SERVICE: website-runner-service
  CONTAINER_NAME: web-container

jobs:
  update-ecs-service:
    name: Update ECS Service
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service with new image
        run: |
          NEW_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.event.inputs.image_tag }}"
          
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition $(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --query 'services[0].taskDefinition' \
              --output text) \
            --query 'taskDefinition')

          # Update the image in the task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$NEW_IMAGE" --arg NAME "${{ env.CONTAINER_NAME }}" \
            '.containerDefinitions |= map(if .name == $NAME then .image = $IMAGE else . end)')

          # Update the service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition <(echo $NEW_TASK_DEFINITION | jq '.') \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Print deployment info
        run: |
          echo "Updated service ${{ env.ECS_SERVICE }} in cluster ${{ env.ECS_CLUSTER }}"
          echo "New image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.event.inputs.image_tag }}"